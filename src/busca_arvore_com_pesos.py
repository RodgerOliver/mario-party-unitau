class No(object):
    def __init__(self, pai=None, estado=None, valor1=None, valor2=None, anterior=None, proximo=None):
        self.pai = pai
        self.estado = estado
        self.valor1 = valor1        # valor do nó na árvore
        self.valor2 = valor2        # custo do caminho até o nó atual
        self.anterior = anterior
        self.proximo = proximo


class lista(object):
    head = None
    tail = None

    # INSERE NO INÍCIO DA LISTA
    def inserePrimeiro(self, s, v1, v2, p):
        novo_no = No(p, s, v1, v2, None, None)
        if self.head == None:
            self.tail = novo_no
        else:
            novo_no.proximo = self.head
            self.head.anterior = novo_no
        self.head = novo_no

    # INSERE NO FIM DA LISTA
    def insereUltimo(self, s, v1, v2, p):

        novo_no = No(p, s, v1, v2, None, None)

        if self.head is None:
            self.head = novo_no
        else:
            self.tail.proximo = novo_no
            novo_no.anterior = self.tail
        self.tail = novo_no

    # INSERE NO FIM DA LISTA
    def inserePos_X(self, s, v1, v2, p):

        # se lista estiver vazia
        if self.head is None:
            self.inserePrimeiro(s, v1, v2, p)
        else:
            atual = self.head
            while atual.valor1 < v1:
                atual = atual.proximo
                if atual is None:
                    break

            if atual == self.head:
                self.inserePrimeiro(s, v1, v2, p)
            else:
                if atual is None:
                    self.insereUltimo(s, v1, v2, p)
                else:
                    novo_no = No(p, s, v1, v2, None, None)
                    aux = atual.anterior
                    aux.proximo = novo_no
                    novo_no.anterior = aux
                    atual.anterior = novo_no
                    novo_no.proximo = atual

    # REMOVE NO INÍCIO DA LISTA
    def deletaPrimeiro(self):
        if self.head is None:
            return None
        else:
            no = self.head
            self.head = self.head.proximo
            if self.head is not None:
                self.head.anterior = None
            else:
                self.tail = None
            return no

    # REMOVE NO FIM DA LISTA
    def deletaUltimo(self):
        if self.tail is None:
            return None
        else:
            no = self.tail
            self.tail = self.tail.anterior
            if self.tail is not None:
                self.tail.proximo = None
            else:
                self.head = None
            return no

    def vazio(self):
        if self.head is None:
            return True
        else:
            return False

    def exibeLista(self):

        aux = self.head
        str = []
        while aux != None:
            str.append(aux.estado)
            aux = aux.proximo

        return str

    def exibeArvore(self):

        atual = self.tail
        caminho = []
        while atual.pai is not None:
            caminho.append(atual.estado)
            atual = atual.pai
        caminho.append(atual.estado)
        return caminho

    def exibeArvore1(self, s):

        atual = self.head
        while atual.estado != s:
            atual = atual.proximo

        caminho = []
        atual = atual.pai
        while atual.pai is not None:
            caminho.append(atual.estado)
            atual = atual.pai
        caminho.append(atual.estado)
        return caminho

    def exibeArvore2(self, s, v1):

        atual = self.tail

        while atual.estado != s or atual.valor1 != v1:
            atual = atual.anterior

        caminho = []
        while atual.pai is not None:
            caminho.append(atual.estado)
            atual = atual.pai
        caminho.append(atual.estado)
        return caminho

    def primeiro(self):
        return self.head

    def ultimo(self):
        return self.tail


class busca(object):

    def custo_uniforme(self, inicio, fim):

        l1 = lista()
        l2 = lista()
        visitado = []

        l1.insereUltimo(inicio, 0, 0, None)
        l2.insereUltimo(inicio, 0, 0, None)
        linha = []
        linha.append(inicio)
        linha.append(0)
        visitado.append(linha)

        while l1.vazio() == False:
            atual = l1.deletaPrimeiro()
            if atual.estado == fim:
                caminho = []
                caminho = l2.exibeArvore2(atual.estado, atual.valor1)
                return caminho, atual.valor2

            ind = nos.index(atual.estado)
            for i in range(len(grafo[ind])):
                novo = grafo[ind][i][0]

                # CÁLCULO DO CUSTO DA ORIGEM ATÉ O NÓ ATUAL
                v2 = atual.valor2 + grafo[ind][i][1]  # custo do caminho
                v1 = v2  # f1(n)

                flag1 = True
                flag2 = True
                for j in range(len(visitado)):
                    if visitado[j][0] == novo:
                        if visitado[j][1] <= v2:
                            flag1 = False
                        else:
                            visitado[j][1] = v2
                            flag2 = False
                        break

                if flag1:
                    l1.inserePos_X(novo, v1, v2, atual)
                    l2.inserePos_X(novo, v1, v2, atual)
                    if flag2:
                        linha = []
                        linha.append(novo)
                        linha.append(v2)
                        visitado.append(linha)

        return []

    def greedy(self, inicio, fim):

        l1 = lista()
        l2 = lista()
        visitado = []
        2
        l1.insereUltimo(inicio, 0, 0, None)
        l2.insereUltimo(inicio, 0, 0, None)
        linha = []
        linha.append(inicio)
        linha.append(0)
        visitado.append(linha)

        while l1.vazio() == False:
            atual = l1.deletaPrimeiro()
            if atual.estado == fim:
                caminho = []
                caminho = l2.exibeArvore2(atual.estado, atual.valor1)
                return caminho, atual.valor2

            ind = nos.index(atual.estado)
            for i in range(len(grafo[ind])):
                novo = grafo[ind][i][0]
                j = nos.index(novo)

                # CÁLCULO DO CUSTO DA ORIGEM ATÉ O NÓ ATUAL
                v2 = atual.valor2 + grafo[ind][i][1]  # custo do caminho
                v1 = h[fim][j]  # f2(n)

                flag1 = True
                flag2 = True
                for j in range(len(visitado)):
                    if visitado[j][0] == novo:
                        if visitado[j][1] <= v2:
                            flag1 = False
                        else:
                            visitado[j][1] = v2
                            flag2 = False
                        break

                if flag1:
                    l1.inserePos_X(novo, v1, v2, atual)
                    l2.inserePos_X(novo, v1, v2, atual)
                    if flag2:
                        linha = []
                        linha.append(novo)
                        linha.append(v2)
                        visitado.append(linha)

        return []

    def a_estrela(self, inicio, fim):

        l1 = lista()
        l2 = lista()
        visitado = []

        l1.insereUltimo(inicio, 0, 0, None)
        l2.insereUltimo(inicio, 0, 0, None)
        linha = []
        linha.append(inicio)
        linha.append(0)
        visitado.append(linha)

        while l1.vazio() == False:
            atual = l1.deletaPrimeiro()
            if atual.estado == fim:
                caminho = []
                caminho = l2.exibeArvore2(atual.estado, atual.valor1)
                return caminho, atual.valor1

            ind = nos.index(atual.estado)
            for i in range(len(grafo[ind])):
                novo = grafo[ind][i][0]
                j = nos.index(novo)

                # CÁLCULO DO CUSTO DA ORIGEM ATÉ O NÓ ATUAL
                v2 = atual.valor2 + grafo[ind][i][1]  # custo do caminho
                v1 = h[fim][j] + v2  # f1(n) + f2(n)

                flag1 = True
                flag2 = True
                for j in range(len(visitado)):
                    if visitado[j][0] == novo:
                        if visitado[j][1] <= v2:
                            flag1 = False
                        else:
                            visitado[j][1] = v2
                            flag2 = False
                        break

                if flag1:
                    l1.inserePos_X(novo, v1, v2, atual)
                    l2.inserePos_X(novo, v1, v2, atual)
                    if flag2:
                        linha = []
                        linha.append(novo)
                        linha.append(v2)
                        visitado.append(linha)

        return []


"""
********************************************************************
                    PROBLEMA: MAPA DA ROMÊNIA
********************************************************************

nos = ["ARAD", "BUCARESTE", "CRAIOVA", "DOBRETA", "EFORIE", "FAGARAS", "GIURGIU", "HIRSOVA", "IASI", "LUGOJ",
       "MEHADIA", "NEAMT", "ORADEA", "PITESTI", "RIMINCU VILCEA", "SIBIU", "TIMISOARA", "URZICENI", "VASLUI",
       "ZERIND"]

grafo = [
    [["ZERIND", 75], ["TIMISOARA", 118], ["SIBIU", 140]],
    [["URZICENI", 85], ["PITESTI", 101], ["GIURGIU", 90], ["FAGARAS", 211]],
    [["RIMINCU VILCEA", 146], ["PITESTI", 138], ["DOBRETA", 120]],
    [["MEHADIA", 75], ["CRAIOVA", 120]],
    [["HIRSOVA", 86]],
    [["SIBIU", 99], ["BUCARESTE", 211]],
    [["BUCARESTE", 90]],
    [["URZICENI", 98], ["EFORIE", 86]],
    [["VASLUI", 92], ["NEAMT", 87]],
    [["TIMISOARA", 111], ["MEHADIA", 70]],
    [["LUGOJ", 70], ["DOBRETA", 75]],
    [["IASI", 87]],
    [["ZERIND", 71], ["SIBIU", 151]],
    [["RIMINCU VILCEA", 97], ["CRAIOVA", 138], ["BUCARESTE", 101]],
    [["SIBIU", 80], ["PITESTI", 97], ["CRAIOVA", 146]],
    [["RIMINCU VILCEA", 80], ["ORADEA", 151], ["FAGARAS", 99], ["ARAD", 140]],
    [["LUGOJ", 111], ["ARAD", 118]],
    [["VASLUI", 142], ["HIRSOVA", 98], ["BUCARESTE", 85]],
    [["URZICENI", 142], ["IASI", 92]],
    [["ORADEA", 71], ["ARAD", 75]]
]

# HEURÍSTICA SERVE SOMENTE PARA DESTINO BUCARESTE
h = [366, 0, 160, 242, 161, 178, 77, 151, 226, 244,
     241, 234, 380, 98, 193, 253, 329, 80, 199, 374]
"""

"""
********************************************************************
                    PROBLEMA: MARIO PARTY
********************************************************************
"""

nos = [
    "A", "B", "C", "D", "E", "F", "G", "H",
    "I", "J", "K", "L", "M", "N", "O",
    "P", "Q", "R", "S", "T", "U", "V",
    "W", "X", "Y", "Z",
]

grafo = [
    [["C", 90], ["S", 70], ["R", 50], ["B", 100]],
    [["P", 40], ["U", 50], ["G", 80], ["A", 100]],
    [["D", 70], ["Z", 60], ["H", 100], ["A", 90]],
    [["S", 50], ["R", 50], ["F", 40]],
    [["P", 40], ["I", 60], ["X", 70], ["T", 20]],
    [["D", 40], ["Z", 40], ["K", 50], ["T", 60], ["X", 50]],
    [["B", 80], ["J", 40], ["V", 90]],
    [["C", 100], ["K", 60], ["Y", 70], ["N", 120]],
    [["E", 60], ["J", 30], ["U", 60], ["L", 70], ["M", 80], ["X", 60]],
    [["G", 40], ["I", 30], ["W", 30]],
    [["F", 50], ["H", 60], ["X", 60], ["L", 40]],
    [["N", 10], ["I", 70], ["K", 40], ["X", 60]],
    [["O", 10], ["W", 10], ["V", 100], ["I", 80]],
    [["Y", 60], ["L", 20], ["O", 10], ["H", 120]],
    [["N", 10], ["M", 10]],
    [["B", 40], ["Q", 50], ["E", 40]],
    [["R", 10], ["T", 20], ["P", 50]],
    [["A", 50], ["Q", 10], ["D", 50]],
    [["A", 70], ["Z", 40], ["C", 60], ["D", 60]],
    [["Q", 20], ["F", 60], ["E", 20]],
    [["B", 50], ["I", 60]],
    [["G", 90], ["W", 90], ["M", 100]],
    [["J", 30], ["V", 90], ["M", 10]],
    [["E", 70], ["I", 60], ["L", 60], ["F", 50], ["K", 60]],
    [["N", 60], ["H", 70]],
    [["S", 40], ["C", 60], ["F", 40]]
]
# HEURÍSTICA SERVE SOMENTE PARA DESTINO O
h = {
    "O": [20.0, 17.0, 16.76305461424021, 12.747548783981962, 12.36931687685298, 10.307764064044152, 10.965856099730654, 10.63014581273465, 7.433034373659253, 6.726812023536855, 6.264982043070834, 3.2015621187164243, 1.5811388300841898, 2.0, 0.0, 14.230249470757707, 15.033296378372908, 15.508062419270823, 16.3783393541592, 12.041594578792296, 12.298373876248844, 8.246211251235321, 3.905124837953327, 7.0710678118654755, 6.103277807866851, 12.649110640673518],
    "A": [0.0, 9.433981132056603, 6.4031242374328485, 7.905694150420948, 8.54400374531753, 10.307764064044152, 14.150971698084906, 13.892443989449804, 13.238202294873727, 15.660459763365825, 14.807092894960848, 18.172781845386247, 19.557607215607945, 20.09975124224178, 20.0, 7.905694150420948, 5.0990195135927845, 4.527692569068709, 5.315072906367325, 8.06225774829855, 10.547511554864494, 19.697715603592208, 17.755280904564703, 13.038404810405298, 17.240939649566666, 8.94427190999916],
    "B": [9.433981132056603, 0.0, 13.038404810405298, 10.793516572461451, 5.830951894845301, 11.629703349613008, 7.0178344238090995, 16.55294535724685, 9.7082439194738, 10.594810050208546, 14.534441853748634, 16.710774967068403, 15.890248582070704, 18.027756377319946, 17.0, 3.8078865529319543, 7.0, 8.514693182963201, 11.543396380615196, 7.615773105863909, 4.716990566028302, 13.0, 13.46291201783626, 12.041594578792296, 17.356554957709783, 12.36931687685298],
    "C": [6.4031242374328485, 13.038404810405298, 0.0, 4.301162633521313, 8.94427190999916, 6.5, 14.84082207965583, 8.246211251235321, 11.715374513859981, 14.534441853748634, 10.688779163215974, 14.221462653327892, 16.80773631397161, 16.278820596099706, 16.76305461424021, 9.82344135219425, 6.082762530298219, 4.527692569068709, 1.5, 7.211102550927978, 11.629703349613008, 19.1049731745428, 15.692354826475215, 9.848857801796104, 12.5, 4.123105625617661],
    "D": [7.905694150420948, 10.793516572461451, 4.301162633521313, 0.0, 5.522680508593631, 2.5, 10.965856099730654, 6.363961030678928, 7.433034373659253, 10.259142264341596, 7.0178344238090995, 10.5, 12.649110640673518, 12.509996003196804, 12.747548783981962, 7.0710678118654755, 4.301162633521313, 3.605551275463989, 3.640054944640259, 3.5355339059327378, 8.139410298049853, 14.849242404917497, 11.412712210513327, 5.70087712549569, 9.340770846134703, 1.5811388300841898],
    "E": [8.54400374531753, 5.830951894845301, 8.94427190999916, 5.522680508593631, 0.0, 5.852349955359813, 6.020797289396148, 10.770329614269007, 5.024937810560445, 7.158910531638177, 8.845903006477066, 11.412712210513327, 11.597413504743201, 13.0, 12.36931687685298, 2.1213203435596424, 3.605551275463989, 4.949747468305833, 7.632168761236874, 2.0, 2.692582403567252, 11.180339887498949, 9.5, 6.4031242374328485, 11.672617529928752, 7.0],
    "F": [10.307764064044152, 11.629703349613008, 6.5, 2.5, 5.852349955359813, 0.0, 10.198039027185569, 4.924428900898052, 5.830951894845301, 8.602325267042627, 4.527692569068709, 8.0, 10.307764064044152, 10.012492197250394, 10.307764064044152, 7.826237921249264, 6.103277807866851, 5.852349955359813, 6.082762530298219, 4.031128874149275, 8.06225774829855, 13.200378782444085, 9.300537618869138, 3.3541019662496847, 6.96419413859206, 2.5],
    "G": [14.150971698084906, 7.0178344238090995, 14.84082207965583, 10.965856099730654, 6.020797289396148, 10.198039027185569, 0.0, 14.5, 5.0990195135927845, 4.242640687119285, 10.793516572461451, 11.661903789690601, 9.604686356149273, 12.419742348374221, 10.965856099730654, 6.264982043070834, 9.5524865872714, 10.965856099730654, 13.601470508735444, 7.632168761236874, 3.605551275463989, 6.020797289396148, 7.106335201775948, 8.558621384311845, 13.285330255586423, 12.175795661885921],
    "H": [13.892443989449804, 16.55294535724685, 8.246211251235321, 6.363961030678928, 10.770329614269007, 4.924428900898052, 14.5, 0.0, 9.5524865872714, 11.884864324004713, 4.716990566028302, 7.5, 11.335784048754634, 9.433981132056603, 10.63014581273465, 12.747548783981962, 10.63014581273465, 9.924716620639604, 8.73212459828649, 8.94427190999916, 12.854960132182441, 16.15549442140351, 11.412712210513327, 6.082762530298219, 4.924428900898052, 5.0],
    "I": [13.238202294873727, 9.7082439194738, 11.715374513859981, 7.433034373659253, 5.024937810560445, 5.830951894845301, 5.0990195135927845, 9.5524865872714, 0.0, 2.8284271247461903, 5.70087712549569, 7.0710678118654755, 6.576473218982953, 8.32165848854662, 7.433034373659253, 6.800735254367722, 8.139410298049853, 9.013878188659973, 10.816653826391969, 5.220153254455275, 5.0, 7.433034373659253, 4.527692569068709, 3.5, 8.276472678623424, 8.200609733428363],
    "J": [15.660459763365825, 10.594810050208546, 14.534441853748634, 10.259142264341596, 7.158910531638177, 8.602325267042627, 4.242640687119285, 11.884864324004713, 2.8284271247461903, 0.0, 7.516648189186454, 7.615773105863909, 5.408326913195984, 8.200609733428363, 6.726812023536855, 8.5, 10.594810050208546, 11.629703349613008, 13.601470508735444, 7.826237921249264, 6.082762530298219, 4.6097722286464435, 2.9154759474226504, 5.852349955359813, 9.617692030835672, 11.01135777277262],
    "K": [14.807092894960848, 14.534441853748634, 10.688779163215974, 7.0178344238090995, 8.845903006477066, 4.527692569068709, 10.793516572461451, 4.716990566028302, 5.70087712549569, 7.516648189186454, 0.0, 3.5355339059327378, 6.726812023536855, 5.5901699437494745, 6.264982043070834, 10.965856099730654, 10.307764064044152, 10.307764064044152, 10.51189802081432, 7.632168761236874, 10.124228365658293, 11.543396380615196, 6.708203932499369, 2.5, 2.8284271247461903, 6.576473218982953],
    "L": [18.172781845386247, 16.710774967068403, 14.221462653327892, 10.5, 11.412712210513327, 8.0, 11.661903789690601, 7.5, 7.0710678118654755, 7.615773105863909, 3.5355339059327378, 0.0, 4.272001872658765, 2.0615528128088303, 3.2015621187164243, 13.46291201783626, 13.46291201783626, 13.647344063956181, 14.035668847618199, 10.594810050208546, 12.041594578792296, 10.5, 5.522680508593631, 5.220153254455275, 2.9154759474226504, 10.111874208078342],
    "M": [19.557607215607945, 15.890248582070704, 16.80773631397161, 12.649110640673518, 11.597413504743201, 10.307764064044152, 9.604686356149273, 11.335784048754634, 6.576473218982953, 5.408326913195984, 6.726812023536855, 4.272001872658765, 0.0, 3.5355339059327378, 1.5811388300841898, 13.341664064126334, 14.508618128546908, 15.132745950421556, 16.28649747490233, 11.510864433221338, 11.236102527122116, 6.670832032063167, 2.5, 6.96419413859206, 7.158910531638177, 12.747548783981962],
    "N": [20.09975124224178, 18.027756377319946, 16.278820596099706, 12.509996003196804, 13.0, 10.012492197250394, 12.419742348374221, 9.433981132056603, 8.32165848854662, 8.200609733428363, 5.5901699437494745, 2.0615528128088303, 3.5355339059327378, 0.0, 2.0, 14.983324063771697, 15.297058540778355, 15.572411502397436, 16.070158679988197, 12.36931687685298, 13.313526955694348, 10.198039027185569, 5.5901699437494745, 7.0710678118654755, 4.6097722286464435, 12.165525060596439],
    "O": [20.0, 17.0, 16.76305461424021, 12.747548783981962, 12.36931687685298, 10.307764064044152, 10.965856099730654, 10.63014581273465, 7.433034373659253, 6.726812023536855, 6.264982043070834, 3.2015621187164243, 1.5811388300841898, 2.0, 0.0, 14.230249470757707, 15.033296378372908, 15.508062419270823, 16.3783393541592, 12.041594578792296, 12.298373876248844, 8.246211251235321, 3.905124837953327, 7.0710678118654755, 6.103277807866851, 12.649110640673518],
    "P": [7.905694150420948, 3.8078865529319543, 9.82344135219425, 7.0710678118654755, 2.1213203435596424, 7.826237921249264, 6.264982043070834, 12.747548783981962, 6.800735254367722, 8.5, 10.965856099730654, 13.46291201783626, 13.341664064126334, 14.983324063771697, 14.230249470757707, 0.0, 3.8078865529319543, 5.385164807134504, 8.381527307120106, 3.8078865529319543, 2.692582403567252, 12.020815280171307, 11.10180165558726, 8.514693182963201, 13.793114224133722, 8.631338250816034],
    "Q": [5.0990195135927845, 7.0, 6.082762530298219, 4.301162633521313, 3.605551275463989, 6.103277807866851, 9.5524865872714, 10.63014581273465, 8.139410298049853, 10.594810050208546, 10.307764064044152, 13.46291201783626, 14.508618128546908, 15.297058540778355, 15.033296378372908, 3.8078865529319543, 0.0, 1.5811388300841898, 4.6097722286464435, 3.0, 6.020797289396148, 14.7648230602334, 12.658988901172163, 8.246211251235321, 12.971121771072847, 5.830951894845301],
    "R": [4.527692569068709, 8.514693182963201, 4.527692569068709, 3.605551275463989, 4.949747468305833, 5.852349955359813, 10.965856099730654, 9.924716620639604, 9.013878188659973, 11.629703349613008, 10.307764064044152, 13.647344063956181, 15.132745950421556, 15.572411502397436, 15.508062419270823, 5.385164807134504, 1.5811388300841898, 0.0, 3.0413812651491097, 3.8078865529319543, 7.5, 15.953056133543816, 13.46291201783626, 8.514693182963201, 12.816005617976296, 4.949747468305833],
    "S": [5.315072906367325, 11.543396380615196, 1.5, 3.640054944640259, 7.632168761236874, 6.082762530298219, 13.601470508735444, 8.73212459828649, 10.816653826391969, 13.601470508735444, 10.51189802081432, 14.035668847618199, 16.28649747490233, 16.070158679988197, 16.3783393541592, 8.381527307120106, 4.6097722286464435, 3.0413812651491097, 0.0, 6.020797289396148, 10.295630140987, 18.117670931993437, 14.983324063771697, 9.340770846134703, 12.589678312014172, 4.031128874149275],
    "T": [8.06225774829855, 7.615773105863909, 7.211102550927978, 3.5355339059327378, 2.0, 4.031128874149275, 7.632168761236874, 8.94427190999916, 5.220153254455275, 7.826237921249264, 7.632168761236874, 10.594810050208546, 11.510864433221338, 12.36931687685298, 12.041594578792296, 3.8078865529319543, 3.0, 3.8078865529319543, 6.020797289396148, 0.0, 4.6097722286464435, 12.206555615733702, 9.7082439194738, 5.385164807134504, 10.404326023342406, 5.0],
    "U": [10.547511554864494, 4.716990566028302, 11.629703349613008, 8.139410298049853, 2.692582403567252, 8.06225774829855, 3.605551275463989, 12.854960132182441, 5.0, 6.082762530298219, 10.124228365658293, 12.041594578792296, 11.236102527122116, 13.313526955694348, 12.298373876248844, 2.692582403567252, 6.020797289396148, 7.5, 10.295630140987, 4.6097722286464435, 0.0, 9.340770846134703, 8.860022573334675, 7.632168761236874, 12.90348790056394, 9.5524865872714],
    "V": [19.697715603592208, 13.0, 19.1049731745428, 14.849242404917497, 11.180339887498949, 13.200378782444085, 6.020797289396148, 16.15549442140351, 7.433034373659253, 4.6097722286464435, 11.543396380615196, 10.5, 6.670832032063167, 10.198039027185569, 8.246211251235321, 12.020815280171307, 14.7648230602334, 15.953056133543816, 18.117670931993437, 12.206555615733702, 9.340770846134703, 0.0, 5.024937810560445, 10.295630140987, 13.0862523283024, 15.620499351813308],
    "W": [17.755280904564703, 13.46291201783626, 15.692354826475215, 11.412712210513327, 9.5, 9.300537618869138, 7.106335201775948, 11.412712210513327, 4.527692569068709, 2.9154759474226504, 6.708203932499369, 5.522680508593631, 2.5, 5.5901699437494745, 3.905124837953327, 11.10180165558726, 12.658988901172163, 13.46291201783626, 14.983324063771697, 9.7082439194738, 8.860022573334675, 5.024937810560445, 0.0, 6.020797289396148, 8.06225774829855, 11.800423721205947],
    "X": [13.038404810405298, 12.041594578792296, 9.848857801796104, 5.70087712549569, 6.4031242374328485, 3.3541019662496847, 8.558621384311845, 6.082762530298219, 3.5, 5.852349955359813, 2.5, 5.220153254455275, 6.96419413859206, 7.0710678118654755, 7.0710678118654755, 8.514693182963201, 8.246211251235321, 8.514693182963201, 9.340770846134703, 5.385164807134504, 7.632168761236874, 10.295630140987, 6.020797289396148, 0.0, 5.315072906367325, 5.830951894845301],
    "Y": [17.240939649566666, 17.356554957709783, 12.5, 9.340770846134703, 11.672617529928752, 6.96419413859206, 13.285330255586423, 4.924428900898052, 8.276472678623424, 9.617692030835672, 2.8284271247461903, 2.9154759474226504, 7.158910531638177, 4.6097722286464435, 6.103277807866851, 13.793114224133722, 12.971121771072847, 12.816005617976296, 12.589678312014172, 10.404326023342406, 12.90348790056394, 13.0862523283024, 8.06225774829855, 5.315072906367325, 0.0, 8.558621384311845],
    "Z": [8.94427190999916, 12.36931687685298, 4.123105625617661, 1.5811388300841898, 7.0, 2.5, 12.175795661885921, 5.0, 8.200609733428363, 11.01135777277262, 6.576473218982953, 10.111874208078342, 12.747548783981962, 12.165525060596439, 12.649110640673518, 8.631338250816034, 5.830951894845301, 4.949747468305833, 4.031128874149275, 5.0, 9.5524865872714, 15.620499351813308, 11.800423721205947, 5.830951894845301, 8.558621384311845, 0.0],

}

# PROGRAMA PRINCIPAL
if __name__ == "__main__":

    sol = busca()
    caminho = []
    # origem, destino = "ARAD", "BUCARESTE"
    origem, destino = "A", "O"

    caminho, custo = sol.custo_uniforme(origem, destino)
    print("Custo Uniforme: ", caminho[::-1], "\ncusto do caminho: ", custo)

    caminho, custo = sol.greedy(origem, destino)
    print("\nGreedy: ", caminho[::-1], "\ncusto do caminho: ", custo)

    caminho, custo = sol.a_estrela(origem, destino)
    print("\nA estrela: ", caminho[::-1], "\ncusto do caminho: ", custo)
